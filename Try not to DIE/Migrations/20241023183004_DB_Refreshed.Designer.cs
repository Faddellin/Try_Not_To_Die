// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Try_not_to_DIE.DBContext;

#nullable disable

namespace Try_not_to_DIE.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20241023183004_DB_Refreshed")]
    partial class DB_Refreshed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Try_not_to_DIE.Models.Comment.CommentDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultationDBid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("authorid")
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("modifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("parentid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("ConsultationDBid");

                    b.HasIndex("authorid");

                    b.HasIndex("parentid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Consultation.ConsultationDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("inspectionDBid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("specialityid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("inspectionDBid");

                    b.HasIndex("specialityid");

                    b.ToTable("Consultation");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Diagnosis.DiagnosisDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InspectionDBid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<Guid>("icd10id")
                        .HasColumnType("uuid");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("InspectionDBid");

                    b.HasIndex("icd10id");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Doctor.DoctorDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.Property<Guid>("specialityid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("specialityid");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Icd10DB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<Guid?>("parentid")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("parentid");

                    b.ToTable("Icd10");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Inspection.InspectionDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("anamnesis")
                        .HasColumnType("text");

                    b.Property<Guid?>("baseInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("complaints")
                        .HasColumnType("text");

                    b.Property<int>("conclusion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("deathDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("doctorid")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("nextVisitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("patientid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("previousInspectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("treatment")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("doctorid");

                    b.HasIndex("patientid");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Patient.PatientDB", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("createTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("gender")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Speciality.SpecialityModel", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("createTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Comment.CommentDB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Consultation.ConsultationDB", null)
                        .WithMany("comments")
                        .HasForeignKey("ConsultationDBid");

                    b.HasOne("Try_not_to_DIE.Models.Doctor.DoctorDB", "author")
                        .WithMany()
                        .HasForeignKey("authorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try_not_to_DIE.Models.Comment.CommentDB", "parent")
                        .WithMany()
                        .HasForeignKey("parentid");

                    b.Navigation("author");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Consultation.ConsultationDB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Inspection.InspectionDB", "inspectionDB")
                        .WithMany("consultations")
                        .HasForeignKey("inspectionDBid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try_not_to_DIE.Models.Speciality.SpecialityModel", "speciality")
                        .WithMany()
                        .HasForeignKey("specialityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("inspectionDB");

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Diagnosis.DiagnosisDB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Inspection.InspectionDB", null)
                        .WithMany("diagnoses")
                        .HasForeignKey("InspectionDBid");

                    b.HasOne("Try_not_to_DIE.Models.Icd10DB", "icd10")
                        .WithMany()
                        .HasForeignKey("icd10id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("icd10");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Doctor.DoctorDB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Speciality.SpecialityModel", "speciality")
                        .WithMany()
                        .HasForeignKey("specialityid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("speciality");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Icd10DB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Icd10DB", "parent")
                        .WithMany()
                        .HasForeignKey("parentid");

                    b.Navigation("parent");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Inspection.InspectionDB", b =>
                {
                    b.HasOne("Try_not_to_DIE.Models.Doctor.DoctorDB", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Try_not_to_DIE.Models.Patient.PatientDB", "patient")
                        .WithMany("allInspections")
                        .HasForeignKey("patientid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Consultation.ConsultationDB", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Inspection.InspectionDB", b =>
                {
                    b.Navigation("consultations");

                    b.Navigation("diagnoses");
                });

            modelBuilder.Entity("Try_not_to_DIE.Models.Patient.PatientDB", b =>
                {
                    b.Navigation("allInspections");
                });
#pragma warning restore 612, 618
        }
    }
}
